<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<!---
	Check linkableObjectIsBusy() to see if this component is busy with an RPC call.
	@author adufilie
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:ui="weave.ui.*"
				xmlns="weave.ui.admin.managers.*" implements="weave.api.core.ILinkableObject" 
				>
	<ui:Indent label="{lang('Server Type')}" group="{indentGroup}">
		<ui:CustomComboBox id="dbmsCombo" change="{generate()}" dataProvider="{ConnectionInfo.dbmsList}" width="130"/>
	</ui:Indent>
	<ui:Indent id="sqliteIndent" label="{lang('SQLite Database File')}" group="{indentGroup}" visible="false" includeInLayout="false">
		<mx:TextInput id="sqliteDBFile" change="{generate()}" width="130" />
		<ui:HelpComponent id="sqliteDBHelp">
			Please enter the canonical file path of the SQLite Database file.
			You may copy and paste directly into this text input field.
		</ui:HelpComponent>
	</ui:Indent>
	<ui:IndentTextInput label="{lang('Server IP')}" id="ipInput" change="{generate()}" text="{hostIP}" inputWidth="130" group="{indentGroup}"/>
	<ui:IndentTextInput label="{lang('Server Port')}" id="portInput" change="{generate()}" text="{ConnectionInfo.getDefaultPort(dbmsCombo.text)}" inputWidth="130" group="{indentGroup}"/>
	<ui:Indent id="sqlDatabaseName" label="{dbmsCombo.text == ConnectionInfo.SQLSERVER ? 'Instance name' : 'Database name'}" group="{indentGroup}">
		<mx:TextInput id="databaseInput" change="{generate()}" width="130"/>
		<mx:Label id="optionalText" text="(Optional)" visible="{dbmsCombo.text != ConnectionInfo.SQLSERVER}"/>
		<ui:HelpComponent id="optionalHelp" visible="{dbmsCombo.text != ConnectionInfo.SQLSERVER}">
			This field is optional.
			You can specify the name of a default database to connect to.
			For SQL Server, this is an instance name.
			Similarly in PostGreSQL, databases are different from schemas.
			MySQL does not differentiate between the two.
		</ui:HelpComponent>
		<!--
			This field is required only for MS SQLServer connections.
			If you had a Server Name \'LocalMachine\\Express\', then this field should be entered as Express.
			If there is no instance name for your server, you may leave this blank.
		-->
	</ui:Indent>
	<ui:IndentTextInput label="User Name" id="userInput" change="{generate()}" inputWidth="130" group="{indentGroup}"/>
	<ui:IndentTextInput label="Password" id="passInput" change="{generate()}" displayAsPassword="false" inputWidth="130" group="{indentGroup}"/>
	<mx:Script>
		<![CDATA[
			import mx.utils.StringUtil;
			
			import weave.api.WeaveAPI;
			import weave.api.getCallbackCollection;
			import weave.api.reportError;
			import weave.services.beans.ConnectionInfo;
			
			[Bindable] public var indentGroup:Object = this;
			
			[Bindable] public var connectString:String = '';
			
			private function get hostUrl():String
			{
				var result:Array = WeaveAPI.topLevelApplication.url.split("http://");
				result = (result.pop() as String).split("/");
				return result[0] as String;
			}
			
			private const hostIP:String = hostUrl.split(':')[0];
			
			public function resetFields(resetConnectString:Boolean = true):void
			{
				dbmsCombo.selectedIndex = 0;
				ipInput.text = hostIP;
				databaseInput.text = "";
				userInput.text = "";
				passInput.text = "";
				if (resetConnectString)
					generate();
			}
			
			private function generate(callingLater:Boolean = false):void
			{
				if (!callingLater)
				{
					callLater(generate, [true]);
					return;
				}
				
				if( dbmsCombo.text == ConnectionInfo.SQLITE ) 
					connectString = getConnectString(dbmsCombo.text, "", "", sqliteDBFile.text, "", "");
				else
					connectString = getConnectString(dbmsCombo.text, ipInput.text, portInput.text, databaseInput.text, userInput.text, passInput.text);
					
				isSQLiteSelected( dbmsCombo.text == ConnectionInfo.SQLITE );
				triggerCallbacks();
			}
			
			private function triggerCallbacks():void
			{
				getCallbackCollection(this).triggerCallbacks();
			}
			
			/**
			 * @param dbms The name of a DBMS (MySQL, PostGreSQL, Microsoft SQL Server)
			 * @param ip The IP address of the DBMS.
			 * @param port The port the DBMS is on (optional, can be "" to use default).
			 * @param database The name of a database to connect to (can be "" for MySQL)
			 * @param user The username to use when connecting.
			 * @param pass The password associated with the username.
			 * @return A connect string that can be used in the getConnection() function.
			 */
			private function getConnectString(dbms:String, ip:String, port:String, database:String, user:String, pass:String):String
			{
				var host:String;
				if (!port)
					host = ip; // default port for specific dbms will be used
				else
					host = ip + ":" + port;
				
				// in format strings: 0=dbms,1=host,2=database,3=user,4=pass
				
				var format:String = null;
				if (dbms == ConnectionInfo.SQLSERVER)
				{
					dbms = "sqlserver"; // this will be put in the format string
					format = "jdbc:jtds:{0}://{1}/;instance={2};user={3};password={4}";
				}
				else if (dbms == ConnectionInfo.SQLITE)
				{
					format = "jdbc:{0}:{1}";
					// jdbc:sqlite:C:\\path\\to\\file.db
				}
				else if (dbms == ConnectionInfo.ORACLE)
				{
					format = "jdbc:{0}:thin:{3}/{4}@{1}:{2}";
					//"jdbc:oracle:thin:<user>/<password>@<host>:<port>:<instance>"
				}
				else // MySQL or PostGreSQL
				{
					format = "jdbc:{0}://{1}/{2}?user={3}&password={4}";
				}
				
				// MySQL connect string uses % as an escape character, so we must use URLEncoder.
				// PostGreSQL does not support % as an escape character, and does not work with the & character.
				if (dbms == ConnectionInfo.MYSQL)
				{
					database = encodeURIComponent(database);
					user = encodeURIComponent(user);
					pass = encodeURIComponent(pass);
				}
				
				var result:String = null;
				
				if( dbms == ConnectionInfo.SQLITE )
					result = StringUtil.substitute(format, dbms.toLowerCase(), database);
				else
					result = StringUtil.substitute(format, dbms.toLowerCase(), host, database, user, pass);
				
				return result;
			}
			
			private function isSQLiteSelected( bool:Boolean ):void
			{
				sqliteIndent.visible = bool;		sqliteIndent.includeInLayout = bool;
				ipInput.visible = !bool;			ipInput.includeInLayout = !bool;
				portInput.visible = !bool;			portInput.includeInLayout = !bool;
				sqlDatabaseName.visible = !bool;	sqlDatabaseName.includeInLayout = !bool;
				databaseInput.visible = !bool;		databaseInput.includeInLayout = !bool;
				userInput.visible = !bool;			userInput.includeInLayout = !bool;
				passInput.visible = !bool;			passInput.includeInLayout = !bool;
			}
		]]>
	</mx:Script>
</mx:VBox>
