<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*"
		 xmlns:userControls="weave.ui.userControls.*"
		 xmlns:settings="weave.ui.settings.*" layout="absolute">
	<mx:Script>
		<![CDATA[
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableObject;
			import weave.api.data.ColumnMetadata;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IColumnWrapper;
			import weave.api.detectLinkableObjectChange;
			import weave.api.getCallbackCollection;
			import weave.api.getSessionState;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.registerLinkableChild;
			import weave.api.setSessionState;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableVariable;
			import weave.core.UIUtils;
			import weave.data.AttributeColumns.AlwaysDefinedColumn;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.EquationColumn;
			import weave.primitives.Bounds2D;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.ColumnListComponent;
			import weave.utils.BitmapText;
			import weave.utils.ColumnUtils;
			import weave.utils.LinkableTextFormat;
			import weave.utils.PlotterUtils;
			import weave.utils.ProbeTextUtils;
			import weave.visualization.layers.LayerSettings;
			import weave.visualization.plotters.ParallelCoordinatesPlotter;
			import weave.visualization.plotters.TextGlyphPlotter;
			
			WeaveAPI.registerImplementation(IVisTool, LineChartTool, "Line Chart");
			
			private var _plotter:ParallelCoordinatesPlotter = null;
			
			override protected function constructor():void
			{
				super.constructor();
				
				visualization.plotManager.marginBottom.value = "80";
				visualization.plotManager.marginTop.value    = "30";
				visualization.plotManager.marginLeft.value   = "80";
				visualization.plotManager.marginRight.value  = "80";
				
				// lock dynamic objects into place
				_plotter = initializePlotters(ParallelCoordinatesPlotter, true);
				// default axis values
				yAxisPlotter.tickCountRequested.value = 5;
				
				xAxisPlotter.setLabelFunction(_plotter.xAxisLabelFunction);
				yAxisPlotter.setLabelFunction(_plotter.yAxisLabelFunction);
				
				
				visualization.plotManager.includeNonSelectableLayersInAutoZoom.lock();
				visualization.enableZoomAndPan.value = false;

				//This variable represents whether or not the tool is a 
				//lineChart(false) or parallelCoords(true)
				_plotter.normalize.value = false;
				_plotter.normalize.lock();
				
				addLabelLayer();
				
				linkSessionState(labelPlotter.zoomToSubset, _plotter.zoomToSubset);

				getCallbackCollection(visualization.plotManager.zoomBounds).addGroupedCallback(this, updateAxes);
				
				// BEGIN TEMPORARY SOLUTION
				visualization.plotManager.marginLeftNumber.addGroupedCallback(this, updateAxes);
				visualization.plotManager.marginBottomNumber.addGroupedCallback(this, updateAxes);
				visualization.plotManager.marginTopNumber.addGroupedCallback(this, updateAxes);
				visualization.plotManager.marginRightNumber.addGroupedCallback(this, updateAxes);

				getCallbackCollection(_plotter).addGroupedCallback(this, updateAxes, true);
				// END TEMPORARY SOLUTION
				var self:* = this;
				visualization.leftMarginClickCallbacks.addImmediateCallback(this, function():void {
					if (_plotter.enableGroupBy.value)
						AttributeSelectorPanel.open(_plotter.yData);
					else
						AttributeSelectorPanel.open(labelPlotter.text);
				});
				visualization.bottomMarginClickCallbacks.addImmediateCallback(this, function():void {
					if (_plotter.enableGroupBy.value)
						AttributeSelectorPanel.open(_plotter.xData);
					else
						AttributeSelectorPanel.open(_plotter.columns);
				});
				
				var count:int = getDefaultColumnsOfMostCommonKeyType().length;
				var columnsToInit:Array = [];
				for (var i:int = 0; i < count; i++)
					columnsToInit.push(_plotter.columns.requestObject(null, DynamicColumn, false));
				if (columnsToInit.length > 0)
					initColumnDefaults.apply(null, columnsToInit);
				
				_plotter.columns.addGroupedCallback(this, updateProbeColumns, true);
				_plotter.xColumns.addGroupedCallback(this, updateProbeColumns,true);
				_plotter.xData.addGroupedCallback(this, updateFilterText);
				_plotter.xValues.addGroupedCallback(this, updateFilterText, true);
				
				linkSessionState(visualization.plotManager.marginRightNumber, labelPlotter.maxWidth);
				handleSelectAllAttrInProbe(true);//default to include all selectable attributes in tool
				_plotter.enableGroupBy.addGroupedCallback(this, function():void { probeChecklist.dataProvider = getSelectableAttributeNames(); }, true);
			}

			public const attributesToIncludeInProbe:LinkableVariable = registerLinkableChild(this,new LinkableVariable(Array),updateProbeColumns,true);
			[Deprecated] public function set includeToolAttributesInProbe(value:Boolean):void
			{
				handleSelectAllAttrInProbe(value);
			}
			
			private function handleSelectAllAttrInProbe(setAll:Boolean):void
			{
				var attributes:Array = getSelectableAttributeNames();
				var valuesToSet:Array = [];
				if(setAll)
				{
					for each (var name:String in attributes)
					{
						valuesToSet.push(true);
					}
				}
				else
				{
					for each (var name2:String in attributes)
					{
						valuesToSet.push(false);
					}
				}
				attributesToIncludeInProbe.setSessionState(valuesToSet);
			}
			
			private function updateProbeColumns():void
			{
				/* first check to see if select all should be disabled or not */
				var attrToIncludeCheckList:Array = attributesToIncludeInProbe.getSessionState() as Array;
				
				if (attrToIncludeCheckList && attrToIncludeCheckList.indexOf(true) >= 0)
					probeColumnsCheckBox.selected = true;
				
				var attributes:Array = getSelectableAttributes();
				var columns:Array = [];
				
				
				if(_plotter.usingXAttributes)
				{
					var xColIndex:int = attributes.indexOf(_plotter.xColumns);
					if(attrToIncludeCheckList[xColIndex])
						columns = _plotter.xColumns.getObjects(IAttributeColumn);
				}
				else
				{
					var colsIndex:int = attributes.indexOf(_plotter.columns);
					if(attrToIncludeCheckList[colsIndex])
						columns = _plotter.columns.getObjects(IAttributeColumn);
				}
				
				var colorIndex:int = attributes.indexOf(_plotter.lineStyle.color);
				if(attrToIncludeCheckList[colorIndex])
					columns.unshift(ColumnUtils.hack_findInternalDynamicColumn(_plotter.lineStyle.color));
				
				var labelIndex:int = attributes.indexOf(labelPlotter.text);
				if(attrToIncludeCheckList[labelIndex])
					columns.unshift(labelPlotter.text);
				
				visualization.additionalProbeColumns = columns;
			}
			
			/**
			 * This function generates a label equation using the current Label column and the plotter's filterColumn
			 * and makes it the new Label column
			 */
			private function generateReverseLookup():void
			{
				if(!_plotter.enableGroupBy.value) 
					return;
				
				var col:IColumnWrapper = labelPlotter.text;
				// NOTE: the equation column that gets generated does not report the correct keys.
				// It incorrectly reports the keys of groupBy because those are the keys from the column variables.
				// Because of this, we cannot rely on it as a key source or a color column.
				
				var dataColumn:DynamicColumn = ColumnUtils.hack_findInternalDynamicColumn(col);
				
				if (!dataColumn.getInternalColumn())
					return;
				if (ColumnUtils.getKeyType(dataColumn) != ColumnUtils.getKeyType(_plotter.groupBy))
					return;
				if (dataColumn.getInternalColumn() is EquationColumn)
					return;
				
				var dataTitle:String = ColumnUtils.getTitle(dataColumn);
				var dataType:String = ColumnUtils.getDataType(dataColumn);
				var dataState:Object = getSessionState(dataColumn);
				var dataEquation:EquationColumn = dataColumn.requestLocalObject(EquationColumn, false) as EquationColumn;
				dataEquation.delayCallbacks();
				var dataVariable:DynamicColumn = dataEquation.variables.requestObject("data", DynamicColumn, false);
				setSessionState(dataVariable, dataState);
				dataEquation.variables.requestObjectCopy("groupBy", _plotter.groupBy);
				dataEquation.setMetadata(ColumnMetadata.TITLE, lang("{0} (reverse lookup)", dataTitle));
				dataEquation.setMetadata(ColumnMetadata.KEY_TYPE, ColumnUtils.getDataType(_plotter.groupBy));
				dataEquation.setMetadata(ColumnMetadata.DATA_TYPE, dataType);
				dataEquation.equation.value = 'var associatedKeys = getAssociatedKeys(groupBy, key);\n' +
					'return associatedKeys ? data.getValueFromKey(associatedKeys[0], dataType) : cast(undefined, dataType);';
				dataEquation.resumeCallbacks();
			}
			
			private function updateFilterText():void
			{
				xValuesInput.text = WeaveAPI.CSVParser.createCSVRow(_plotter.getXValues());
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				xAxisPlotter.axisLabelRelativeAngle.value = -45;
				xAxisPlotter.labelHorizontalAlign.value = BitmapText.HORIZONTAL_ALIGN_RIGHT;
				xAxisPlotter.labelVerticalAlign.value = BitmapText.VERTICAL_ALIGN_TOP;
				
				visualization.plotManager.includeNonSelectableLayersInAutoZoom.value = false;
				
				colorSelector.columnWrapper = _plotter.lineStyle.color;
				labelSelector.dynamicObject = labelPlotter.text;
				
				xDataSelector.dynamicObject = _plotter.xData;
				yDataSelector.dynamicObject = _plotter.yData;
				groupBySelector.dynamicObject = _plotter.groupBy;
				groupLabelSelector.dynamicObject = labelPlotter.text;
				groupColorSelector.columnWrapper = _plotter.lineStyle.color;
				
				linkBindableProperty(labelPlotter.size.defaultValue,labelSizeSlider,"value");
				linkBindableProperty(labelPlotter.color.defaultValue, colorPicker, "selectedColor");

				linkBindableProperty(_plotter.lineStyle.alpha.defaultValue, alphaSlider, "value");
				linkBindableProperty(_plotter.shapeSize, shapeSizeSlider, "value");
				linkBindableProperty(_plotter.lineStyle.weight.defaultValue, thicknessSlider, "value");
				linkBindableProperty(_plotter.shapeToDraw, shapeCombo, "selectedItem");
				linkBindableProperty(_plotter.shapeBorderThickness, shapeBorderSizeSlider, "value");
				linkBindableProperty(_plotter.shapeBorderColor, shapeBorderColorPicker, "selectedColor");
				_plotter.curveType.addGroupedCallback(this, handleCurveType, true);
				function handleCurveType():void
				{
					curveCheckBox.selected = _plotter.curveType.value == ParallelCoordinatesPlotter.CURVE_DOUBLE;
				}
				linkBindableProperty(attributesToIncludeInProbe,probeChecklist,"selection");
			}
			
			override public function getSelectableAttributeNames():Array
			{
				if (_plotter.enableGroupBy.value)
					return [lang("X values"), lang("Y values"), lang("Group by"), lang("Group color"), lang("Group label"), ];
				else
					return [lang("Color"), lang("Label"), lang("Y Columns")];
			}
			override public function getSelectableAttributes():Array
			{
				if (_plotter.enableGroupBy.value)
					return [_plotter.xData, _plotter.yData, _plotter.groupBy, _plotter.lineStyle.color, labelPlotter.text];
				else
					return [_plotter.lineStyle.color, labelPlotter.text, _plotter.columns];
			}
			
			private function getColumnObjects():Array
			{
				return _plotter.xColumns.getObjects(IAttributeColumn);
			}
			
			private static const tempBounds:Bounds2D = new Bounds2D(); // reusable temporary object
			
			
			private function updateAxes():void
			{
				handlePanelTitleChange();
				
				var columns:Array = _plotter.columns.getObjects();
			
				if(_plotter.usingXAttributes)
				{
					visualization.plotManager.zoomBounds.getDataBounds(tempBounds);
					tempBounds.yMax = tempBounds.yMin;
					xAxisPlotter.axisLineMinValue.value = tempBounds.xMin;
					xAxisPlotter.axisLineMaxValue.value = tempBounds.xMax;
					xAxisPlotter.axisLineDataBounds.copyFrom(tempBounds);
					xAxisPlotter.forceTickCount.value = false;
					xAxisPlotter.tickCountRequested.value = 10;
				}
				else
				{
					xAxisPlotter.tickCountRequested.value = Math.max(2, columns.length);
					xAxisPlotter.forceTickCount.value = true;
				}
				
				visualization.plotManager.zoomBounds.getDataBounds(tempBounds);
				tempBounds.xMax = tempBounds.xMin;
				yAxisPlotter.axisLineMinValue.value = tempBounds.yMin;
				yAxisPlotter.axisLineMaxValue.value = tempBounds.yMax;
				yAxisPlotter.axisLineDataBounds.copyFrom(tempBounds);
				
				var xAxisName:String = '';
				var yAxisName:String = '';
				if (_plotter.enableGroupBy.value)
				{
					xAxisName = ColumnUtils.getTitle(_plotter.xData);
					yAxisName = ColumnUtils.getTitle(_plotter.yData);
				}
				xAxisPlotter.setSideAxisName(
					xAxisName,
					0,
					0, visualization.plotManager.marginBottomNumber.value - 3,
					BitmapText.VERTICAL_ALIGN_BOTTOM
				);
				yAxisPlotter.setSideAxisName(
					yAxisName,
					-90,
					-visualization.plotManager.marginLeftNumber.value, 0,
					BitmapText.VERTICAL_ALIGN_TOP
				);

				xAxisPlotter.updateLabels();
				yAxisPlotter.updateLabels();			
			}
			
			override public function get defaultPanelTitle():String
			{
				var columns:Array = _plotter.columns.getObjects();
				if (columns.length == 0)
					return lang('Line Chart');
				
				if (_plotter.enableGroupBy.value)
					return lang("Line Chart of {0} by {1}", ColumnUtils.getTitle(_plotter.yData), ColumnUtils.getTitle(_plotter.xData));
				
				var newTitle:String = lang("Line Chart of ");
				for (var i:int = 0; i < columns.length; i++)
				{
					if (i > 0)
						newTitle += lang(', ');
					newTitle += ColumnUtils.getTitle(columns[i]);
				}
				return newTitle;
			}
			
			private function handleCurveCheckBox():void
			{
				if (curveCheckBox.selected)
					_plotter.curveType.value = ParallelCoordinatesPlotter.CURVE_DOUBLE;
				else
					_plotter.curveType.value = ParallelCoordinatesPlotter.CURVE_NONE;
			}
			
			private var labelPlotter:TextGlyphPlotter = null ;
			private function addLabelLayer():void
			{
				var name:String = "label";
				labelPlotter = visualization.plotManager.plotters.requestObject(name, TextGlyphPlotter, true);
				var settings:LayerSettings = visualization.plotManager.getLayerSettings(name);
				settings.selectable.value = false;
				settings.selectable.lock();
				
				_plotter.columns.addImmediateCallback(this, updateColumns, true);
				_plotter.xColumns.addImmediateCallback(this, updateColumns, true);

				labelPlotter.xScreenOffset.value = 5;
				labelPlotter.hAlign.defaultValue.value = BitmapText.HORIZONTAL_ALIGN_LEFT;
				labelPlotter.hideOverlappingText.value = true;
				linkSessionState(labelPlotter.dataY, labelPlotter.sortColumn);
				labelPlotter.hack_setSingleKeySource(_plotter.filteredKeySet);
				getCallbackCollection(LinkableTextFormat.defaultTextFormat).addGroupedCallback(this, updateLabel, true);
			}
			private function updateLabel():void
			{
				labelPlotter.setDefaultTextFormat(LinkableTextFormat.defaultTextFormat);
			}
			
			private function updateColumns():void
			{
				var _columns:Array = _plotter.columns.getObjects();
				var _xattrObjects:Array = _plotter.xColumns.getObjects();
				
				if (_columns.length == 0)
				{
					labelPlotter.dataY.removeObject();
					labelPlotter.dataX.removeObject();
					return;
				}
				var lastColumn:IAttributeColumn;
				var repeat:Boolean = false;
				do
				{
					repeat = false;
					if( _columns.length == 0 )
						break;
					if(!_plotter.usingXAttributes)
					{
						var x:AlwaysDefinedColumn = labelPlotter.dataX.requestLocalObject(AlwaysDefinedColumn, false);
					    x.defaultValue.value = (_columns.length) - 1;
					}
						
					else
					{
						lastColumn= _xattrObjects.pop();
						labelPlotter.dataX.requestLocalObjectCopy(lastColumn as ILinkableObject);
					}
					
	
					lastColumn= _columns.pop();
					labelPlotter.dataY.requestLocalObjectCopy(lastColumn as ILinkableObject);
					repeat = ( labelPlotter.dataY.keys.length == 0);
				} while (repeat );

				if (labelPlotter.text.getInternalColumn() == null)
				{
					var headers:Array = ProbeTextUtils.probeHeaderColumns.getObjects();
					for (var i:int = 0; i < headers.length; i++)
					{
						if (ColumnUtils.getKeyType(headers[i]) == ColumnUtils.getKeyType(lastColumn))
						{
							labelPlotter.text.requestLocalObjectCopy(headers[i]);
							break;
						}
					}
				}
			}
			private var _groupByErrorStrings:Dictionary = new Dictionary(true);
			private function initDynamicColumnComponent(component:DynamicColumnComponent, helpContent:String):void
			{
				component.helpContent = helpContent; 
				component.errorStringFunction = function():String {
					if (detectLinkableObjectChange(initDynamicColumnComponent, _plotter, labelPlotter))
					{
						var ktX:String = _plotter.xData.getMetadata(ColumnMetadata.KEY_TYPE);
						var ktY:String = _plotter.yData.getMetadata(ColumnMetadata.KEY_TYPE);
						var ktGB:String = _plotter.groupBy.getMetadata(ColumnMetadata.KEY_TYPE);
						var dtGB:String = _plotter.groupBy.getMetadata(ColumnMetadata.DATA_TYPE);
						var ktC:String = _plotter.lineStyle.color.getMetadata(ColumnMetadata.KEY_TYPE);
						var ktL:String = labelPlotter.text.getMetadata(ColumnMetadata.KEY_TYPE);
						
						for each (var dcc:DynamicColumnComponent in [xDataSelector, yDataSelector, groupBySelector])
						{
							_groupByErrorStrings[dcc] = ktX == ktY && ktY == ktGB ? '' : lang(HELP_KT_XYGB);
							dcc.updateError();
						}
						
						_groupByErrorStrings[groupColorSelector] = dtGB == ktC ? '' : lang(HELP_KT_COLOR);
						_groupByErrorStrings[groupLabelSelector] = dtGB == ktL ? '' : lang(HELP_KT_LABEL);
						
						groupColorSelector.updateError();
						groupLabelSelector.updateError();
						
						generateReverseLookupControls.visible =
							generateReverseLookupControls.includeInLayout =
								ktGB == ktL;
					}
					
					return _groupByErrorStrings[component];
				};
			}
			
			private static const HELP_KT_XYGB:String = "'X', 'Y', and 'Group by' must all have the same keyType.";
			private static const HELP_DT_GROUP:String = HELP_KT_XYGB + " The values in the 'Group by' column are used as foreign keys. The dataType of the 'Group by' column specifies the foreign keyType used by the 'Group color' and 'Group label' columns.";
			private static const HELP_KT_COLOR:String = "The keyType of the color column must equal the dataType of the 'Group by' column.";
			private static const HELP_KT_LABEL:String = "The keyType of the label column must equal the dataType of the 'Group by' column.";
		]]>
	</mx:Script>
	<mx:Number id="controlsFontSize">10</mx:Number>
	<ui:ControlPanel>
		<mx:VBox id="attributesPanel" label="{lang('Data')}">
			<ui:CheckBoxWithNestedOptions id="enableGroupByCheckBox" creationComplete="linkBindableProperty(_plotter.enableGroupBy, event.target, 'selected')"
										  label="{lang('Group records by column values (Advanced)')}">
				<ui:DynamicColumnComponent id="xDataSelector" creationComplete="initDynamicColumnComponent(xDataSelector, HELP_KT_XYGB)"/>
				<ui:DynamicColumnComponent id="yDataSelector" creationComplete="initDynamicColumnComponent(yDataSelector, HELP_KT_XYGB)"/>
				<ui:DynamicColumnComponent id="groupBySelector" creationComplete="initDynamicColumnComponent(groupBySelector, HELP_DT_GROUP)"/>
				<ui:DynamicColumnComponent id="groupColorSelector" showLinkControl="false" creationComplete="initDynamicColumnComponent(groupColorSelector, HELP_KT_COLOR)"/>
				<ui:DynamicColumnComponent id="groupLabelSelector" creationComplete="initDynamicColumnComponent(groupLabelSelector, HELP_KT_LABEL)"/>
				<ui:Indent id="generateReverseLookupControls">
					<mx:Button label="{lang('Generate reverse lookup for \'Group label\'')}"
							   click="generateReverseLookup()"/>
					<ui:HelpComponent>
						Generates label equation from current Label column if its keyType matches the group-by keyType.
					</ui:HelpComponent>
				</ui:Indent>
				<ui:Indent label="{lang('Customize X values:')}">
					<mx:TextInput id="xValuesInput" toolTip="{lang('These values will appear on the x axis')}" width="100%"/>
					<mx:Button label="{lang('Apply')}" click="_plotter.xValues.value = xValuesInput.text;"/>
					<mx:Button label="{lang('Reset')}" click="_plotter.xValues.value = ''; updateFilterText();"/>
				</ui:Indent>
			</ui:CheckBoxWithNestedOptions>
			<mx:VBox width="100%" height="100%" visible="{!enableGroupByCheckBox.selected}" includeInLayout="{!enableGroupByCheckBox.selected}">
				<ui:DynamicColumnComponent id="colorSelector" showLinkControl="false"/>
				<ui:DynamicColumnComponent id="labelSelector"/>
				<ui:ColumnListComponent creationComplete="(event.target as ColumnListComponent).hashMap = _plotter.columns"/>
			</mx:VBox>
		</mx:VBox>
		<mx:VBox label="{lang('Mouseover info')}">
			<ui:CheckBoxWithNestedOptions id="probeColumnsCheckBox" label="{lang('Include tool attributes in mouseover info')}"
						 change="if (UIUtils.hasFocus(probeColumnsCheckBox)) handleSelectAllAttrInProbe(probeColumnsCheckBox.selected)">
				<ui:CheckBoxList id="probeChecklist"/>
			</ui:CheckBoxWithNestedOptions>
		</mx:VBox>
		<mx:VBox id="VizControlsPanel" label="{lang('Appearance')}">
			<mx:HBox verticalAlign="middle">
				<mx:Label text="{lang('Shape:')}" color="0x000000" fontSize="{controlsFontSize}" 
						  toolTip="{lang('This controls what shape is used to indicate the data points on the axes.')}"/>
				<ui:CustomComboBox id="shapeCombo" dataProvider="{ParallelCoordinatesPlotter.shapesAvailable}"/>
				<mx:HBox enabled="{shapeCombo.selectedItem != ParallelCoordinatesPlotter.NO_SHAPE}" verticalAlign="middle">
					<mx:Label text="{lang('Size:')}"
							  color="0x000000" fontSize="{controlsFontSize}" 
							  toolTip="{lang('This controls the size of the shapes indicating the data points on the axes.')}"/>
					<mx:HSlider id="shapeSizeSlider"
								width="100%" 
								snapInterval="1"
								tickInterval="5"
								labels="{['0','5','10','15','20']}"
								minimum="0" maximum="20" 
								liveDragging="true"/>
				</mx:HBox>
			</mx:HBox>
			
			<mx:HBox verticalAlign="middle">
				<mx:HBox
						enabled="{!(shapeCombo.selectedItem == ParallelCoordinatesPlotter.NO_SHAPE || 
						shapeCombo.selectedItem == ParallelCoordinatesPlotter.EMPTY_CIRCLE ||
						shapeCombo.selectedItem == ParallelCoordinatesPlotter.EMPTY_SQUARE ||
						shapeBorderSizeSlider.value == 0) }">
					<mx:Label text="{lang('Shape border color:')}" color="0x000000" fontSize="{controlsFontSize}"/>
					<ui:CustomColorPicker id="shapeBorderColorPicker"
									toolTip="{lang('This controls color of the border around the shape at each point.')}"/>
				</mx:HBox>
				
				<mx:HBox width="100%" verticalAlign="middle"
						enabled="{shapeCombo.selectedItem != ParallelCoordinatesPlotter.NO_SHAPE}">
					<mx:Label text="Thickness:" color="0x000000" fontSize="{controlsFontSize}" 
							  toolTip="{lang('This controls the border size of the shapes indicating the data points on the axes.')}"/>
					<mx:HSlider id="shapeBorderSizeSlider" 
								width="100%" 
								snapInterval="1"
								tickInterval="1" 
								labels="{['0', '1', '2', '3', '4', '5']}"
								minimum="0" maximum="5"
								liveDragging="true"/>
				</mx:HBox>
			</mx:HBox>
			
			<mx:HBox verticalAlign="middle">
				<mx:Label text="{lang('Line Opacity:')}" toolTip="{lang('Use this control to see how transparent lines are.  Moving left increases transparency (decreased opacity), moving to the right decreases transparency (increased opacity) up to fully opaque (no transparency).')}"/>
				<mx:HSlider id="alphaSlider" 
							width="100%" 
							snapInterval="0.1"
							tickInterval="0.5" labels="{['0%', '50%', '100%']}"
							dataTipFormatFunction="{PlotterUtils.alphaSliderFormatFunction}"
							minimum="0.0" maximum="1.0" 
							liveDragging="true"/>
				<mx:Label text="{lang('Thickness:')}"/>
				<mx:HSlider id="thicknessSlider" minimum="1" maximum="4" labels="{['1','2','3','4']}" snapInterval="1" liveDragging="true" tickInterval="1"/>
				
			</mx:HBox>
			<mx:CheckBox id="curveCheckBox" label="{lang('Curved lines')}"
						 change="_plotter.curveType.value = curveCheckBox.selected ? ParallelCoordinatesPlotter.CURVE_DOUBLE : ParallelCoordinatesPlotter.CURVE_NONE"/>
			
			<mx:HBox verticalAlign="middle">
				<mx:Label text="{lang('Label Text Size: ')}"/>
				<mx:HSlider id="labelSizeSlider"
							width="100%"
							alpha="1.0"
							snapInterval="1"
							tickInterval="5" labels="{['5','10','15','20']}"
							minimum="5" maximum="20" 
							liveDragging="true"/>
				<mx:Label text="{lang('Color:')}"/>
				<ui:CustomColorPicker id="colorPicker"/>
			</mx:HBox>

			<mx:CheckBox id="zoomToSubsetCheckBox" label="{lang('Zoom to Subset')}" 
						 toolTip="Enables automatic zooming to the subset of data currently displayed"
						 creationComplete="linkBindableProperty(_plotter.zoomToSubset, event.target, 'selected')"/>
		</mx:VBox>
	</ui:ControlPanel>
</SimpleVisTool>
