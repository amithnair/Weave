<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*"
	     layout="absolute" xmlns:userControls="weave.ui.userControls.*">
	<mx:Script>
		<![CDATA[
			import weave.api.WeaveAPI;
			import weave.api.data.IAttributeColumn;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableBoolean;
			import weave.data.AttributeColumns.BinnedColumn;
			import weave.data.AttributeColumns.ColorColumn;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.FilteredColumn;
			import weave.primitives.ColorRamp;
			import weave.ui.AttributeSelectorPanel;
			import weave.utils.ColumnUtils;
			import weave.utils.LinkableTextFormat;
			import weave.visualization.plotters.ColorBinLegendPlotter;

			WeaveAPI.registerImplementation(IVisTool, ColorBinLegendTool, "Color Legend");
			
			private var _plotter:ColorBinLegendPlotter = null;
			
			override protected function constructor():void
			{
				super.constructor();
				// lock dynamic objects into place
				_plotter = initializePlotters(ColorBinLegendPlotter, false);

				visualization.plotManager.enableAutoZoomToExtent.value = true;
				visualization.enableZoomAndPan.value = false;
				
				visualization.topMarginClickCallbacks.addGroupedCallback(this, handleMarginLabelClick);
				
				panelWidth.value = "20%";
				panelHeight.value = "50%";
				
				visualization.plotManager.marginBottom.value = "5";
				visualization.plotManager.marginTop.value    = DEFAULT_MARGIN_TOP.toString();
				visualization.plotManager.marginLeft.value   = "5";
				visualization.plotManager.marginRight.value  = "5";
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				dataColumnComponent.dynamicObject = _plotter.dynamicColorColumn;
				_plotter.dynamicColorColumn.addImmediateCallback(this, colorColumnCallback, true);
				visualization.plotManager.marginTopNumber.addImmediateCallback(this, handleMarginChange);
				linkBindableProperty(visualization.plotManager.marginTopNumber, marginLabel, "height");
				
				linkBindableProperty(_plotter.maxColumns, legendControls.numColumns, 'value');
				linkBindableProperty(_plotter.ascendingOrder, legendControls.ascendingOrderCheck, 'selected');
				linkBindableProperty(_plotter.itemLabelFunction, legendControls.txtLegendValuesFunction, 'text', 500);
				linkBindableProperty(_plotter.legendTitleFunction, legendControls.txtLegendAttrNameFunc, 'text', 500);
				legendControls.chkShowLegendAttrName.addEventListener(Event.CHANGE, toggleShowAttributeName);
				
				getCallbackCollection(LinkableTextFormat.defaultTextFormat).addGroupedCallback(this, updateMarginLabel, true);
				_plotter.legendTitleFunction.addGroupedCallback(this, updateMarginLabel, true);
				_plotter.dynamicColorColumn.addGroupedCallback(this, updateMarginLabel, true);
				visualization.topMarginColumn = _plotter.dynamicColorColumn;
			}
			
			private function colorColumnCallback():void
			{
				binEditor.setTarget(internalBinnedColumn);
				cRampEditor.colorRamp = internalColorRamp;
				updateProbeColumns();
			}
			
			private function get internalColorRamp():ColorRamp
			{
				var cc:ColorColumn = _plotter.getInternalColorColumn();
				if (cc)
					return cc.ramp;
				return null;
			}
			
			private function get internalBinnedColumn():BinnedColumn
			{
				var cc:ColorColumn = _plotter.getInternalColorColumn();
				if (cc)
					return cc.getInternalColumn() as BinnedColumn
				return null;
			}

			private function get internalDataColumn():DynamicColumn
			{
				var bc:BinnedColumn = internalBinnedColumn;
				if (bc)
				{
					var fc:FilteredColumn = bc.getInternalColumn() as FilteredColumn;
					if (fc)
						return fc.internalDynamicColumn;
				}
				return null;
			}

			override public function getSelectableAttributeNames():Array
			{
				return [lang("Color data")];
			}
			override public function getSelectableAttributes():Array
			{
				return [_plotter.dynamicColorColumn];
			}
			
			private function handleMarginLabelClick():void
			{
				AttributeSelectorPanel.open(_plotter.dynamicColorColumn);
			}
			
			private function updateMarginLabel():void
			{
				if (!parent)
					return callLater(updateMarginLabel);
				
				var colTitle:String = ColumnUtils.getTitle(_plotter.dynamicColorColumn);
				try
				{
					marginLabel.text = _plotter.legendTitleFunction.apply(null, [colTitle]);   
				}
				catch (e:Error)
				{
					marginLabel.text = colTitle;
				}
				
				LinkableTextFormat.defaultTextFormat.copyToStyle(marginLabel);
			}

			public const includeToolAttributesInProbe:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), updateProbeColumns);
			
			private function updateProbeColumns():void
			{
				visualization.additionalProbeColumns = [];
				if (includeToolAttributesInProbe.value)
				{
					var idc:IAttributeColumn = internalDataColumn;
					if (idc)
						visualization.additionalProbeColumns.push(idc);
				}
			}
			
			override public function get defaultPanelTitle():String
			{
				return lang("Color Legend");
			}
			
			private static const DEFAULT_MARGIN_TOP:int = 25;
			private var _prevMarginTop:String = String(DEFAULT_MARGIN_TOP); // this stores the previous nonzero top margin setting
			private function handleMarginChange():void
			{
				if (visualization.plotManager.marginTopNumber.value != 0)
				{
					_prevMarginTop = visualization.plotManager.marginTop.value;
					legendControls.chkShowLegendAttrName.selected = true;
				}
				else
					legendControls.chkShowLegendAttrName.selected = false;
			}
			private function toggleShowAttributeName(e:Event):void
			{
				visualization.plotManager.marginTop.value = legendControls.chkShowLegendAttrName.selected ? _prevMarginTop : '0';
			}
		]]>
	</mx:Script>
	
	<mx:TextArea id="marginLabel"
				 visible="{marginLabel.height > 0}"
				 mouseChildren="false" mouseEnabled="false"
				 x="0" y="0" paddingLeft="5" paddingTop="5" paddingRight="5" width="100%"
				 horizontalScrollPolicy="off" verticalScrollPolicy="off"
				 wordWrap="true" selectable="false" editable="false"
				 borderThickness="0" backgroundAlpha="0"/>
	<ui:ControlPanel>
		<mx:VBox label="{lang('Binning')}">
			<ui:DynamicColumnComponent id="dataColumnComponent" label="{lang('Color data')}" showLinkControl="false"/>
			<ui:BinningDefinitionEditor id="binEditor" width="100%"/>
		</mx:VBox>
		<mx:VBox label="{lang('Appearance')}">
			<mx:CheckBox id="probeColumnsCheckBox" label="{lang('Include tool attributes in probe tooltip')}"
						 toolTip="{lang('Checking this box makes the tool\'s binned attribute visible in this tool\'s probe tooltip')}"
						 creationComplete="linkBindableProperty(includeToolAttributesInProbe,event.target,'selected')"/>
			<ui:LegendControls id="legendControls"/>
			<ui:Indent label="{lang('Shape type')}">
				<ui:CustomComboBox dataProvider="{ColorBinLegendPlotter.ENUM_SHAPE_TYPE}" labelFunction="lang"
								   creationComplete="linkBindableProperty(_plotter.shapeType, event.target, 'selectedItem')"/>
			</ui:Indent>
			<ui:Indent label="{lang('Max shape size')}">
				<mx:HSlider liveDragging="true" minimum="10" maximum="60" tickInterval="10" snapInterval="5"
							creationComplete="linkBindableProperty(_plotter.shapeSize, event.target, 'value')"/>
			</ui:Indent>
			<ui:ColorRampEditor id="cRampEditor"/>
		</mx:VBox>
	</ui:ControlPanel>

</SimpleVisTool>
