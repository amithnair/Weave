<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<DraggablePanel xmlns="weave.ui.*" 
				xmlns:mx="http://www.adobe.com/2006/mxml" 
				xmlns:ui="weave.ui.*"
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				>
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.data.ColumnMetadata;
			import weave.api.data.IKeyFilter;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableDynamicObject;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.KeySets.NumberDataFilter;
			import weave.data.KeySets.StringDataFilter;
			import weave.utils.ColumnUtils;
			
			public const dynamicKeyFilter:LinkableDynamicObject = registerLinkableChild(this, new LinkableDynamicObject(IKeyFilter));
			
			override protected function constructor():void
			{
				super.constructor();
			}
			
			override public function dispose():void
			{
				var names:Array = Weave.defaultSubsetKeyFilter.globalFilterNames.getSessionState() as Array;
				if (names)
				{
					var index:int = names.indexOf(dynamicKeyFilter.globalName);
					if (index >= 0)
						names.splice(index, 1);
				}
				super.dispose()
			}
			
			override protected function createChildren():void
			{
				super.createChildren();
				subMenu.addSubMenuItem(lang("String filter"), setFilterType, [NumberDataFilter]);
				subMenu.addSubMenuItem(lang("Number filter"), setFilterType, [NumberDataFilter]);
			}
			
			override protected function get defaultPanelTitle():String
			{
				var column:DynamicColumn;
				if (numberFilter)
					column = numberFilter.column;
				if (stringFilter)
					column = stringFilter.column;
				if (column)
					return lang('Filter for {0}', ColumnUtils.getTitle(column));
				return lang('Filter');
			}
			
			private function setFilterType(type:Class):void
			{
				dynamicKeyFilter.requestGlobalObject(dynamicKeyFilter.globalName, type, false);
			}
			
			public function get keyFilter():IKeyFilter
			{
				return dynamicKeyFilter.internalObject as IKeyFilter;
			}
			private function get numberFilter():NumberDataFilter
			{
				return dynamicKeyFilter.internalObject as NumberDataFilter;
			}
			private function get stringFilter():StringDataFilter
			{
				return dynamicKeyFilter.internalObject as StringDataFilter;
			}
		]]>
	</mx:Script>
</DraggablePanel>
