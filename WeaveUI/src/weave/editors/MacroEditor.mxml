<?xml version="1.0" encoding="utf-8"?>
<!--
/*
	Weave (Web-based Analysis and Visualization Environment)
	Copyright (C) 2008-2011 University of Massachusetts Lowell
	
	This file is a part of Weave.
	
	Weave is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License, Version 3,
	as published by the Free Software Foundation.
	
	Weave is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<ui:ControlPanel xmlns:mx="http://www.adobe.com/2006/mxml"
				 xmlns:ui="weave.ui.*"
				 backgroundColor="#EFF4BC"
				 title="{lang('Macro Editor')}">
	<mx:VBox width="100%" height="100%" paddingBottom="5" paddingLeft="5" paddingRight="5"
			 paddingTop="5">
		<mx:HBox>
			<mx:Button label="{lang('Add')}" click="newMacro()"/>
			<mx:Button label="{lang('Rename')}" click="renameMacro()" enabled="{macroList.selectedItem}"/>
			<mx:Button label="{lang('Delete')}" click="controller.hashMap.removeObject(selectedMacroName);" enabled="{macroList.selectedItem}"/>
		</mx:HBox>
		<mx:HDividedBox width="100%" height="100%">
			<mx:VBox width="15%" height="100%">
				<mx:List id="macroList" width="100%" height="100%" change="setSelectedMacro(macroList.selectedItem as LinkableFunction)"/>
			</mx:VBox>
			<mx:VDividedBox width="85%" height="100%" visible="{macroList.selectedItem}" includeInLayout="{macroList.selectedItem}">
				<ui:CodeEditor id="editor" change="handleMacroInput()"/>
				<mx:HBox width="100%">
					<mx:VBox>
						<mx:Button id="testButton" label="{lang('Test macro')}" click="testMacro(true)"/>
						<ui:CustomCheckBox id="autoTest" label="{lang('Auto test')}"/>
					</mx:VBox>
					<mx:TextArea id="result" width="100%" height="100%" minHeight="22" editable="false"/>
				</mx:HBox>
			</mx:VDividedBox>
		</mx:HDividedBox>
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			
			import weave.api.newLinkableChild;
			import weave.core.LinkableFunction;
			import weave.core.LinkableWatcher;
			import weave.ui.AlertTextBox;
			import weave.ui.AlertTextBoxEvent;
			import weave.ui.VariableListController;
			import weave.utils.EventUtils;
			
			private const controller:VariableListController = newLinkableChild(this, VariableListController);
			private const macroWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, handleMacroChange);
			
			override protected function constructor():void
			{
				super.constructor();
				
				minimizable.value = true;
				maximizable.value = true;
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				controller.hashMap = LinkableFunction.macros;
				controller.allowMultipleSelection = false;
				controller.view = macroList;
				LinkableFunction.macros.childListCallbacks.addImmediateCallback(this, handleMacroChange, true);
				
				BindingUtils.bindSetter(setSelectedMacro, macroList, 'selectedItem');
				
				this.targets = [controller.hashMap];
				this.sessionEditorTarget = controller.hashMap;
			}
			
			public function get selectedMacro():LinkableFunction
			{
				return macroWatcher.target as LinkableFunction;
			}
			
			public function setSelectedMacro(value:LinkableFunction):void
			{
				if (macroList.selectedItem != value)
					macroList.selectedItem = value;
				macroWatcher.target = value as LinkableFunction;
			}
			
			public function get selectedMacroName():String
			{
				return controller.hashMap.getName(selectedMacro);
			}
			
			private function handleMacroChange():void
			{
				setSelectedMacro(selectedMacro); // will set macroList.selectedItem if necessary
				
				if (!selectedMacro)
					setSelectedMacro(controller.hashMap.getObjects()[0] as LinkableFunction);
				
				result.text = '';
				if (selectedMacro)
				{
					editor.text = selectedMacro.value;
					EventUtils.callLaterThrottled(this, testMacro);
				}
				else
				{
					editor.text = '';
				}
			}
			private function handleMacroInput():void
			{
				if (selectedMacro)
					selectedMacro.value = editor.text;
			}
			
			private function newMacro():void
			{
				AlertTextBox.show(
					lang("New macro"),
					lang("Enter a name for the new macro. The name should be a valid ActionScript identifier."),
					'',
					macroNameValidator
				).addEventListener(
					AlertTextBoxEvent.BUTTON_CLICKED,
					function(event:AlertTextBoxEvent):void
					{
						if (event.confirm == true)
							setSelectedMacro(controller.hashMap.requestObject(event.textInput, LinkableFunction, false));
					}
				);
			}
			private function renameMacro():void
			{
				AlertTextBox.show(
					lang("Rename macro"),
					lang('Enter a new name for the selected macro. The name should be a valid ActionScript identifier.'),
					selectedMacroName,
					macroNameValidator
				).addEventListener(
					AlertTextBoxEvent.BUTTON_CLICKED,
					function(event:AlertTextBoxEvent):void
					{
						if (event.confirm == true)
							setSelectedMacro(controller.hashMap.renameObject(selectedMacroName, event.textInput) as LinkableFunction);
					}
				);
			}
			private function deleteMacro():void
			{
				if (selectedMacro)
					controller.hashMap.removeObject(selectedMacroName);
			}
			private function testMacro(forced:Boolean = false):void
			{
				result.text = '';
				
				if (!selectedMacro)
					return;
				
				try
				{
					if (autoTest.selected || forced)
						result.text = LinkableFunction.evaluateMacro(selectedMacroName);
					else
						selectedMacro.validate();
					testButton.enabled = true;
				}
				catch(e:Error)
				{
					result.text = e.toString();
					testButton.enabled = false;
				}
			}
			
			private function macroNameValidator(name:String):Boolean
			{
				return !controller.hashMap.getObject(name)
					&& LinkableFunction.isValidSymbolName(name);
			}
			
			override public function revert():void
			{
				super.revert();
				if( controller.hashMap.getNames(LinkableFunction).length > 0 )
					editor.text = selectedMacro.value;
			}
		]]>
	</mx:Script>
</ui:ControlPanel>